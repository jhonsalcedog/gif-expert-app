{"version":3,"sources":["components/AddCategory/AddCategory.js","components/GifGridItem/GifGridItem.js","helpers/getGifs.js","components/GifGrid/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp/GifExpertApp.js","App.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","prevCategories","name","ariaLabel","value","placeholder","onChange","target","GifGridItem","url","title","md","xs","className","Header","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","color","size","GifExpertApp","categories","Body","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe8bfd40.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport TextField from 'emerald-ui/lib/TextField';\n// import Button from 'emerald-ui/lib/Button';\n\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((prevCategories) => [inputValue, ...prevCategories]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField name=\"value\" ariaLabel=\"search\" value={inputValue} placeholder=\"Search\" onChange={handleInputChange} />\n\n      {/* <Button color=\"info\">Add</Button> */}\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import React from 'react';\n\nimport Col from 'emerald-ui/lib/Col';\nimport Card from 'emerald-ui/lib/Card';\nimport PropTypes from 'prop-types';\n\nimport './GifGridItem.css';\nimport 'animate.css';\n\nconst GifGridItem = ({ url, title }) => {\n  return (\n    <Col md={6} xs={12} className=\"animate__animated animate__zoomIn\">\n      <Card className=\"gif-card\">\n        <Card.Header>\n          <h1 className=\"eui-card-header-title\">{title}</h1>\n        </Card.Header>\n        <div>\n          <img className=\"gif-card-img\" src={url} alt={title} />\n        </div>\n      </Card>\n    </Col>\n  );\n};\n\nGifGridItem.propTypes = {\n  url: PropTypes.string,\n  title: PropTypes.string,\n};\n\nexport default GifGridItem;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )} &limit=10&api_key=29IvbaPsMCaymQ6Jljr1UQxFN0cKxexk`;\n\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  // console.log(gifs);\n  return gifs;\n};\n","import React from 'react';\nimport GifGridItem from '../GifGridItem';\nimport Row from 'emerald-ui/lib/Row';\nimport Col from 'emerald-ui/lib/Col';\nimport Label from 'emerald-ui/lib/Label';\nimport Spinner from 'emerald-ui/lib/Spinner';\nimport { useFetchGifs } from '../../hooks/useFetchGifs';\nimport PropTypes from 'prop-types';\n\nimport './GifGrid.css';\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <div>\n      <h3>\n        <Label color=\"success\" className=\"label-gif\">\n          {category}\n        </Label>\n      </h3>\n      <Row>\n        {loading && (\n          <Col md={12} className=\"text-center\">\n            <Spinner size=\"lg\" />\n          </Col>\n        )}\n        {images.map(({ id, url, title }) => {\n          return <GifGridItem key={id} url={url} title={title} />;\n          //   return <GifGridItem key={img.id} {...img} />;\n        })}\n      </Row>\n    </div>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string,\n};\n\nexport default GifGrid;\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setTimeout(() => {\n        setState({ data: imgs, loading: false });\n      }, 2000);\n    });\n  }, [category]);\n\n  return state; // {data:[], loading: true}\n};\n","import React, { useState } from 'react';\nimport Container from 'emerald-ui/lib/Container';\nimport Panel from 'emerald-ui/lib/Panel';\nimport AddCategory from '../AddCategory';\nimport GifGrid from '../GifGrid/GifGrid';\n// import PropTypes from 'prop-types';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Goku']);\n\n  // const handleAdd = () => {\n  //   // setCategories([...categories, 'Picoro']);\n  //   setCategories((prevCategories) => [...prevCategories, 'Picoro']);\n  // };\n\n  return (\n    <Container>\n      <Panel>\n        <Panel.Body>\n          <h1>GifExpertApp</h1>\n          <AddCategory setCategories={setCategories} />\n          <div>\n            {categories.map((category) => {\n              return <GifGrid key={category} category={category} />;\n            })}\n          </div>\n        </Panel.Body>\n      </Panel>\n    </Container>\n  );\n};\n\n// GifExpertApp.propTypes = {};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport GifExpertApp from './components/GifExpertApp';\n\nimport 'emerald-ui/lib/styles.css';\nimport './index.css';\n\nfunction App() {\n  return (\n    <>\n      <GifExpertApp />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}